# Swift Basics Summary 

## Creating constants and Variables

Creating and changing a **variable** 

```swift
var name = "Ted"
name = "Rebecca"
```

Creating **constants** - variables whose value does not change
**`let** user = "Daphne"`

Printing contents of a variable/constant/String etc
`print(user)`

## Strings

Declaration
**`let** **actor** = "Tom Cruise"` 

Multiline String

```swift
let movie = """
A day in
the life of an
Apple engineer
"""
```

Printing the number of characters in a string
`print(**actor**.count)`

To let us know if a string start or end with a given string

```swift
print(quote.hasPrefix("He"))
print(quote.hasSuffix("Away."))
```

## Integers

Declaration

```swift
let score = 10
let higherScore = score + 10
let halvedScore = score / 2
```

compound assignment

```swift
var counter = 10
counter += 5
```

custom functions

```swift
let number = 120
print(number.isMultiple(of: 3))
```

random integers from a given range
**`let** id = Int.random(**in**: 1...1000)`

## Decimals

Declaration
**`let** score = 3.0`

## Booleans

Declaration

```swift
let goodDogs = true
let gameOver = false
```

## Joining Strings

```swift
let name = "Taylor"let age = 26
let message = "I'm \(name) and I'm \(age) years old."print(message)
```

## Arrays

Declaration

```swift
var colors = ["Red", "Green", "Blue"]
let numbers = [4, 8, 15, 16]
var readings = [0.1, 0.5, 0.8]
```

Displaying/Accessing the contents of an array

```swift
print(colors[0])
print(readings[2])
```

Adding and removing contents of an array
`colors.append("Tartan")`

```swift
colors.remove(at: 0) // Remove at position
print(colors.count)
```

Check if a specified value is available in the array
`print(colors.contains("Octarine"))`

## Dictionary

Declaration

```swift
let employee = [
    "name": "Taylor",
    "job": "Singer"]
```

Accessing the elements and giving default value if there is no value for the key

```swift
print(employee["name",default: "Unknown"])
print(employee["job",default: "Unknown"])
```

## Sets

Declaration

```swift
var numbers = Set([1, 1, 3, 5, 7])
print(numbers)
```

Adding elements to the sets
`numbers.insert(10)`

## Enums

Declaration

```swift
enum Weekday {
case monday, tuesday, wednesday, thursday, friday
}
```

Accessing the enums

```swift
var day = Weekday.monday
day = .friday
```

## Type annotations

Declaration for variables

```swift
let player: String = "Roy"var luckyNumber: Int = 13
let pi: Double = 3.141
var isEnabled: Bool = true
var albums: Array<String> = ["Red", "Fearless"]
var user: Dictionary<String, String> = ["id": "@twostraws"]
var books: Set<String> = Set(["The Bluest Eye", "Foundation"])
```

Declaration for complex data types

```swift
var albums: [String] = ["Red", "Fearless"]
var user: [String: String] = ["id": "@twostraws"]
var teams: [String] = [String]()
var clues = [String]()
```

## Conditions

if else condition

```swift
let age = 16

if age < 12 {
    print("You can't vote")
}elseif age < 18 {
    print("You can vote soon.")
}else {
    print("You can vote now.")
}
```

## Switch statements

```swift
enum Weather {
case sun, rain, wind
}

let forecast = Weather.sun

switch forecast {
case .sun:
    print("A nice day.")
case .rain:
    print("Pack an umbrella.")
default:
    print("Should be okay.")
}
```

## Loops

for loop declaration

```swift
let platforms = ["iOS", "macOS", "tvOS", "watchOS"]

for osin platforms {
    print("Swift works on \(os).")
}
```

for loops to run in range of numbers

```swift
for iin 1...12 {
    print("5 x \(i) is \(5 * i)")
}
```

While loops

```swift
var count = 10

while count > 0 {
    print("\(count)…")
    count -= 1
}

print("Go!")
```

use of continue to skip the current iteration in while loop

```swift
let files = ["me.jpg", "work.txt", "sophie.jpg"]

for filein files {
if file.hasSuffix(".jpg") == false {
continue}

    print("Found picture: \(file)")
}
```

## Functions

Declaration

```swift
func printTimesTables(number: Int) {
for iin 1...12 {
        print("\(i) x \(number) is \(i * number)")
    }
}

printTimesTables(number: 5)
```

functions that can return a value

```swift
func rollDice() -> Int {
return Int.random(in: 1...6)
}

let result = rollDice()
print(result)
```

Returning multiple values from a function

```swift
func getUser() -> (firstName: String, lastName: String) {
    (firstName: "Taylor", lastName: "Swift")
}

let user = getUser()
print("Name: \(user.firstName) \(user.lastName)")
```

customize parameter label in a functions

```swift
func isUppercase(_ string: String) -> Bool {
    string == string.uppercased()
}

let string = "HELLO, WORLD"
let result = isUppercase(string)

// Another example
func printTimesTables(for number: Int) {
    for i in 1...12 {
        print("\(i) x \(number) is \(i * number)")
    }
}

printTimesTables(for: 5)
```

default values for parameters 

```swift
func greet(_ person: String, formal: Bool = false) {
if formal {
        print("Welcome, \(person)!")
    }else {
        print("Hi, \(person)!")
    }
}

greet("Tim", formal: true)
greet("Taylor")
```

## Error handling in functions

throw syntax

```swift
enum PasswordError: Error {
case short, obvious
}

func checkPassword(_ password: String) throws -> String {
    if password.count < 5 {
        throw PasswordError.short
    }

    if password == "12345" {
        throw PasswordError.obvious
    }

    if password.count < 10 {
        return "OK"
    } else {
        return "Good"
    }
}

let string = "12345"

do {
let result = try checkPassword(string)
    print("Rating: \(result)")
}catch PasswordError.obvious {
    print("I have the same combination on my luggage!")
}catch {
    print("There was an error.")
}
```

## Closures

Assigning functionality directly to variables

```swift
let sayHello = {
    print("Hi there!")
}

sayHello()

//Another example
let team = ["Gloria", "Suzanne", "Tiffany", "Tasha"]

let onlyT = team.filter({ (name: String) -> Bool in
    return name.hasPrefix("T")
})
```

## **Trailing closures and shorthand syntax**

```swift
let team = ["Gloria", "Suzanne", "Tiffany", "Tasha"]

let onlyT = team.filter({ (name: String) -> Boolinreturn name.hasPrefix("T")
})

print(onlyT)
```

## Structs

Structs let us create our own custom data type 

```swift
struct Album {
let title: String
let artist: String
var isReleased = true

func printSummary() {
        print("\(title) by \(artist)")
    }
}

let red = Album(title: "Red", artist: "Taylor Swift")
print(red.title)
red.printSummary()
```

Computed properties

```swift
struct Employee {
let name: String
var vacationAllocated = 14
var vacationTaken = 0

var vacationRemaining: Int {
        vacationAllocated - vacationTaken
    }
}
```

get set 

```swift
var vacationRemaining: Int {
get {
        vacationAllocated - vacationTaken
    }

set {
        vacationAllocated = vacationTaken + newValue
    }
}
```

Property observers

Property observers are pieces of code that run when properties change: didset runs when the property just changed, and willset runs *before* the property changed.

```swift
struct Game {
var score = 0 {
didSet {
            print("Score is now \(score)")
        }
    }
}

var game = Game()
game.score += 10
game.score -= 3
```

## Custom initializer

```swift
struct Player {
let name: String
let number: Int

init(name: String) {
self.name = name
        number = Int.random(in: 1...99)
    }
}
```

### **Access control**

Swift has several options for access control inside structs, but four are the most common:

- Use **`private`** for “don’t let anything outside the struct use this.”
- Use **`private(set)`** for “anything outside the struct can read this, but don’t let them change it.”
- Use **`fileprivate`** for “don’t let anything outside the current file use this.”
- Use **`public`** for “let anyone, anywhere use this.”

```swift
struct BankAccount {
private(set)var funds = 0

mutatingfunc deposit(amount: Int) {
        funds += amount
    }

mutatingfunc withdraw(amount: Int) -> Bool {
if funds > amount {
            funds -= amount
return true
        }else {
return false
        }
    }
}
```

Static properties 

Swift supports static properties and methods, allowing you to add a property or method directly to the struct itself rather than to one instance of the struct:

```swift
struct AppData {
staticlet version = "1.3 beta 2"staticlet settings = "settings.json"}
```

## Class

Class declaration

```swift
class Employee {
let hours: Int

init(hours: Int) {
self.hours = hours
    }

func printSummary() {
        print("I work \(hours) hours a day.")
    }
}

class Developer: Employee {
func work() {
        print("I'm coding for \(hours) hours.")
    }
}

let novall = Developer(hours: 8)
novall.work()
novall.printSummary()
```

Inheritance

```swift
class Vehicle {
let isElectric: Bool

init(isElectric: Bool) {
self.isElectric = isElectric
    }
}

class Car: Vehicle {
let isConvertible: Bool

init(isElectric: Bool, isConvertible: Bool) {
self.isConvertible = isConvertible
super.init(isElectric: isElectric)
    }
}
```

we can *deinitialize a variable*

```swift
class User {
let id: Int

init(id: Int) {
self.id = id
        print("User \(id): I'm alive!")
    }

deinit {
        print("User \(id): I'm dead!")
    }
}

for iin 1...3 {
let user = User(id: i)
    print("User \(user.id): I'm in control!")
}
```

## Protocols

Rules about structure of a struct

```swift
protocol Vehicle {
func estimateTime(for distance: Int) -> Int
func travel(distance: Int)
}

struct Car: Vehicle {
    func estimateTime(for distance: Int) -> Int {
        distance / 50
    }

    func travel(distance: Int) {
        print("I'm driving \(distance)km.")
    }
}

// All the methods listed in Vehicle must exist exactly in Car, with the same name, parameters, and return types.

// Now you can write a function that accepts any kind of type that conforms to Vehicle, because Swift knows it implements both estimateTime() and travel():

func commute(distance: Int, using vehicle: Vehicle) {
    if vehicle.estimateTime(for: distance) > 100 {
        print("Too slow!")
    } else {
        vehicle.travel(distance: distance)
    }
}

let car = Car()
commute(distance: 100, using: car)

```

## Extension

```swift
extension String {
mutatingfunc trim() {
self =self.trimmed()
    }
}

quote.trim()

// Another example
extension String {
    var lines: [String] {
        self.components(separatedBy: .newlines)
    }
}
```

## Protocol Extension

```swift
extension Collection {
var isNotEmpty: Bool {
        isEmpty == false
    }
}
```

## Optionals

```swift
let opposites = [
    "Mario": "Wario",
    "Luigi": "Waluigi"]

let peachOpposite = opposites["Peach"]
```

Unwrapping optionals with guard

```swift
func printSquare(of number: Int?) {
guardlet number = numberelse {
        print("Missing input")
return}

    print("\(number) x \(number) is \(number * number)")
}
```

**Nil coalescing**

```swift
let tvShows = ["Archer", "Babylon 5", "Ted Lasso"]
let favorite = tvShows.randomElement() ?? "None"
```

**Optional chaining**

```swift
let names = ["Arya", "Bran", "Robb", "Sansa"]
let chosen = names.randomElement()?.uppercased()
print("Next in line: \(chosen ?? "No one")")
```

**Optional try?**
