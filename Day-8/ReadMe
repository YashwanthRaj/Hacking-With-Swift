For the functions that we use, we can specify default parameters that will run when the value for the specified data is not specified in function call. 

Error handling in functions takes three steps:

1. Telling Swift about the possible errors that can happen.
2. Writing a function that can flag up errors if they happen.
3. Calling that function, and handling any errors that might happen.

If a function is able to throw errors, then we must mark it with throw keyword in the position of return statement. Inside the function, the error checking statements must be written first, Then the body of the function. 

We can also use try and catch to achieve same functionality. The try block of code will run and if there is error, only then it will run the catch block of code. 

SUMMARY:

- Functions let us reuse code easily by carving off chunks of code and giving it a name.
- All functions start with the word **`func`**, followed by the function’s name. The function’s body is contained inside opening and closing braces.
- We can add parameters to make our functions more flexible – list them out one by one separated by commas: the name of the parameter, then a colon, then the type of the parameter.
- You can control how those parameter names are used externally, either by using a custom external parameter name or by using an underscore to disable the external name for that parameter.
- If you think there are certain parameter values you’ll use repeatedly, you can make them have a default value so your function takes less code to write and does the smart thing by default.
- Functions can return a value if you want, but if you want to return multiple pieces of data from a function you should use a *tuple*. These hold several named elements, but it’s *limited* in a way a dictionary is not – you list each element specifically, along with its type.
- Functions can throw errors: you create an enum defining the errors you want to happen, throw those errors inside the function as needed, then use **`do`**, **`try`**, and **`catch`** to handle them at the call site.
