Range → This returns us a range of integers from start to end as mentioned in the range.
Eg. 1…12 will give us a range from start as 1 and end as 12. Note here that this kind of … declaration includes the end letter as well. 

There is another kind of range that will exclude the ending integer. 
Eg. 1..<12. This will start from 1 and end in 11. 

This kind of declaration is useful when we are dealing with arrays as their position ends with a number less than the length of array. 
In conditions where we need the loop to run certain number of times, and we dont care about the loop variable, we use _

## While loop

In this loop, we are given a condition and this loop will run again and again until the condition is false. These loops are useful when we dont know how many times the loop will run. 

**var** random_int = Int.random(in: 1...100) → This will return a random number whose range will be between the our specified range, in our case that is 1 to 100. 

Inside while loop, we have break and continue.
Continue will skip the current iteration.
Break will stop the while loop /  exit the entire loop / skip all iterations.


SUMMARY
We use if statements to check a condition is true. You can pass in any condition you want, but ultimately it must boil down to a Boolean.
If you want, you can add an else block, and/or multiple else if blocks to check other conditions. Swift executes these in order.
You can combine conditions using ||, which means that the whole condition is true if either subcondition is true, or &&, which means the whole condition is true if both subconditions are true.
If you’re repeating the same kinds of check a lot, you can use a switch statement instead. These must always be exhaustive, which might mean adding a default case.
If one of your switch cases uses fallthrough, it means Swift will execute the following case afterwards. This is not used commonly.
The ternary conditional operator lets us check WTF: What, True, False. Although it’s a little hard to read at first, you’ll see this used a lot in SwiftUI.
for loops let us loop over arrays, sets, dictionaries, and ranges. You can assign items to a loop variable and use it inside the loop, or you can use underscore, _, to ignore the loop variable.
while loops let us craft custom loops that will continue running until a condition becomes false.
We can skip some or all loop items using continue or break respectively.
