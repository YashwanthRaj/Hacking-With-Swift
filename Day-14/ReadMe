Optionals, which means data that might be present or might not. We represent them as String? if it is a string optional. We use if let to unwrap them. Unwrap is to find out if the optional has a value inside it or not. It is common to unwrap the optional in a constant with the same name. This method is called shadowing. 

We use if let to run code when we have a value inside the optional. We use guard let else when we want to run the code if the optional does not have an value inside. 

Guard does two things to help:

1. If you use guard to check a function’s inputs are valid, Swift will always require you to use return if the check fails.
2. If the check passes and the optional you’re unwrapping has a value inside, you can use it *after* the guard code finishes.

The *nil coalescing operator*  lets us unwrap an optional and provide a default value if the optional was empty.

Summary

- Optionals let us represent the absence of data, which means we’re able to say “this integer has no value” – that’s different from a fixed number such as 0.
- As a result, everything that *isn’t* optional definitely has a value inside, even if that’s just an empty string.
- Unwrapping an optional is the process of looking inside a box to see what it contains: if there’s a value inside it’s sent back for use, otherwise there will be nil inside.
- We can use if let to run some code if the optional has a value, or guard let to run some code if the optional *doesn’t* have a value – but with guard we must always exit the function afterwards.
- The nil coalescing operator, ??, unwraps and returns an optional’s value, or uses a default value instead.
- Optional chaining lets us read an optional inside another optional with a convenient syntax.
- If a function might throw errors, you can convert it into an optional using try? – you’ll either get back the function’s return value, or nil if an error is thrown.
