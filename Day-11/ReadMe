Access Control controls how a struct’s properties and methods can be accessed from outside the struct.

Swift provides us with several options, but when you’re learning you’ll only need a handful:

- Use private for “don’t let anything outside the struct use this.”
- Use fileprivate for “don’t let anything outside the current file use this.”
- Use public for “let anyone, anywhere use this.”

There’s one extra option that is sometimes useful for learners, which is this: private(set). This means “let anyone read this property, but only let my methods write it.” Usually when we create a struct, we need to create a variable to create an instance. But we can use static to create functions and variables for the struct itself. What this means is that when using struct we dont need to use or create an instance, we can access and make use of the functions and variables. 

If you want to mix and match static and non-static properties and methods, there are two rules:

1. To access non-static code from static code… you’re out of luck: static properties and methods can’t refer to non-static properties and methods 
2. To access static code from non-static code, always use your type’s name. You can also use S**elf** to refer to the current type.

Now we have S**elf** *and* S**elf**, and they mean different things: S**elf** refers to the current value of the struct, and S**elf** refers to the current *type*.

SUMMARY:

- You can create your own structs by writing s**truct**, giving it a name, then placing the struct’s code inside braces.
- Structs can have variable and constants (known as properties) and functions (known as methods)
- If a method tries to modify properties of its struct, you must mark it as m**utating**.
- You can store properties in memory, or create computed properties that calculate a value every time they are accessed.
- We can attach didSet and willSet property observers to properties inside a struct, which is helpful when we need to be sure that some code is always executed when the property changes.
- Initializers are a bit like specialized functions, and Swift generates one for all structs using their property names.
- You can create your own custom initializers if you want, but you must always make sure all properties in your struct have a value by the time the initializer finishes, and before you call any other methods.
- We can use access to mark any properties and methods as being available or unavailable externally, as needed.
- It’s possible to attach a property or methods directly to a struct, so you can use them without creating an instance of the struct.
