This is a Bill splitting app. We enter the cost of our food, select how much of a tip we want to leave, and how many people you’re with, and it will tell you how much each person needs to pay.

Inside Xcode we should see the following files in the space on the left, which is called the project navigator:

- <AppName>App.swift contains code for launching your app. If you create something when the app launches and keep it alive the entire time, you’ll put it here.
- ContentView.swift contains the initial user interface (UI) for your program.
- Assets.xcassets is an *asset catalog* – a collection of pictures that you want to use in your app. You can also add colors here, along with app icons, iMessage stickers, and more.
- Preview Content is a group, with Preview Assets.xcassets inside – this is another asset catalog, this time specifically for example images you want to use when you’re designing your user interfaces, to give you an idea of how they might look when the program is running.

First, **`import SwiftUI`** tells Swift that we want to use all the functionality given to us by the SwiftUI framework. Apple provides us with many frameworks for things like machine learning, audio playback, image processing, and more, so rather than assume our program wants to use everything ever we instead say which parts we want to use so they can be loaded.

Second, **`struct ContentView: View`** creates a new struct called **`ContentView`**, saying that it conforms to the **`View`** protocol. **`View`** comes from SwiftUI, and is the basic protocol that must be adopted by anything you want to draw on the screen – all text, buttons, images, and more are all views, including your own layouts that combine other views.

Third, **`var body: some View`** defines a new computed property called **`body`**, which has an interesting type: **`some View`**. This means it will return something that conforms to the **`View`** protocol, which is our layout. Behind the scenes this will actually result in a very complicated data type being returned based on all the things in our layout, but **`some View`** means we don’t need to worry about that.

The **`View`** protocol has only one requirement, which is that you have a computed property called **`body`** that returns **`some View`**. You can (and will) add more properties and methods to your view structs, but **`body`** is the only thing that’s required.

Fourth, **`VStack`** and the code inside it shows a globe image with the text "Hello, world!" below it. That globe image comes from Apple's SF Symbols icon set, and there are thousands of these icons built right into iOS. Text views are simple pieces of static text that get drawn onto the screen, and will automatically wrap across multiple lines as needed.

Fifth, **`imageScale()`**, **`foregroundStyle()`**, and **`padding()`** are methods being called on the image and **`VStack`**. This is what SwiftUI calls a *modifier*, which are regular methods with one small difference: they always return a new view that contains both your original data, plus the extra modification you asked for. In our case that means the globe image will be shown larger and in blue, and the whole **`body`** property will return a padded text view, not just a regular text view.

Below the **`ContentView`** struct you’ll see **`#Preview`** with **`ContentView()`** inside. This is a special piece of code that won’t actually form part of your final app that goes to the App Store, but is instead specifically for Xcode to use so it can show a preview of your UI design alongside your code.

These previews use an Xcode feature called the canvas, which is usually visible directly to the right of your code. You can customize the preview code if you want, and they will only affect the way the canvas shows your layouts – it won’t change the actual app that gets run.

The canvas will automatically preview using one specific Apple device, such as the iPhone 15 Pro or an iPad. To change this, look at the top center of your Xcode window for the current device, then click on it and select an alternative. This will also affect how your code is run in the virtual iOS simulator later on.

In the xcode window, press option + cmd +  p → will refresh the canvas preview. 

Forms are scrolling lists of static controls like text and images, but can also include user interactive controls like text fields, toggle switches, buttons, and more.

We also have navigation stack with navigationtitle at end of this stack which allows us to have a navigation section. This will help to maintain safe areas for contents inside. With navigationBarTitleDisplayMode we can change the modify the title. 

The way our user interface looks – the things people can see and what they can interact with – are determined by the state of your program. 

Swift gives us a special solution called a *property wrapper*: a special attribute we can place before our properties that effectively gives them ability to change content. The reason this is necessary is because the content view is a struct that follows view protocol. And struct can be constants. Hence we can make use of @state in front of property. 

 **`@State`** allows us to work around the limitation of structs: we know we can’t change their properties because structs are fixed, but **`@State`** allows that value to be stored separately by SwiftUI in a place that *can* be modified. There are several ways of storing program state in SwiftUI, and you’ll learn all of them. **`@State`** is specifically designed for simple properties that are stored in one view. As a result, Apple recommends we add **`private`** access control to those properties.

Two-way *binding*: we bind the text field so that it shows the value of our property, but we also bind it so that any changes to the text field also update the property.

In Swift, we mark these two-way bindings with a special symbol so they stand out: we write a dollar sign before them. This tells Swift that it should read the value of the property but also write it back as any changes happen.  When we see a dollar sign before a property name, remember that it creates a two-way binding: the value of the property is read, but also written.

SwiftUI needs to be able to identify every view on the screen uniquely, so it can detect when things change. Hence we use id there.
